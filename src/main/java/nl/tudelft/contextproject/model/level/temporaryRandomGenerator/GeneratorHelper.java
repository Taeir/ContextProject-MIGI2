package nl.tudelft.contextproject.model.level.temporaryRandomGenerator;

import lombok.SneakyThrows;
import nl.tudelft.contextproject.util.Size;

import java.io.File;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Class which is used to create random levels.
 */
public final class GeneratorHelper {
    private static Random rand;

    private static final Pattern PATTERN = Pattern.compile("(?<width>\\d+)x(?<height>\\d+)_.*");

    /**
     * Avoid instantiation of the helper.
     */
    private GeneratorHelper() {}

    /**
     * Return a random number between two values.
     * @param min
     *          The minimum value the random number can be.
     * @param max
     *          The maximum value the random number can be.
     * @return
     *          The random number.
     */
    public static int getRandom(int min, int max) {
        if (rand == null) {
            createRNG(System.currentTimeMillis());
        }
        return (rand.nextInt((max - min)) + min);
    }

    /**
     * If the random number generator has not been instantiated yet,
     * created one with the given seed.
     * @param seed
     *          The seed to use for creation of the RNG.
     */
    public static void createRNG(long seed) {
        if (rand == null) {
            rand = new Random(seed);
        }
    }

    /**
     * Method to load all rooms from file and return the sizes.
     *
     * <p>The URISyntaxException occurs if somehow the URL generated by {@link Class#getResource(String)}
     * is invalid. Since this does not occur, this exception can safely be ignored.
     *
     * @return
     *          An ArrayList of sizes.
     */
    @SneakyThrows(URISyntaxException.class)
    public static List<Size> loadRooms() {
        File[] files = new File(GeneratorHelper.class.getResource("/rooms").toURI()).listFiles();

        /**
         * If the folder is not a folder, we throw a nullpointer exception.
         */
        if (files == null) {
            throw new NullPointerException("There are no rooms.");
        }

        List<Size> sizes = new ArrayList<>();
        for (File f : files) {
            Matcher m = PATTERN.matcher(f.getName());
            if (m.matches()) {
                int width = Integer.parseInt(m.group("width"));
                int height = Integer.parseInt(m.group("height"));
                sizes.add(new Size(width, height));
            }
        }
        return sizes;
    }
}
